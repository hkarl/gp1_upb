Heimübung 13
1. Klasse mit Attributen und Objekten sowie Sichtbarkeiten schreiben lassen (Klasse Ellipse aus Python-Teil), Wahl der Typen begründen [7-12 Punkte]
2. a) Klasse gegeben mit zwei Variablen, eine global, eine nicht, beide werden gleich behandelt. Aufgabe: Erklären Sie, wieso (nach einem gegebenen Programmfragment) die zwei Variablen unterschiedliche Werte haben [2 Punkte]
! Klassenhierarchie (mit Vererbung) als UML-Diagramm gegeben: als Java-Code umsetzen [3-6 Punkte]
b) Code mit Vererbung gegeben, wo dynamische Methodenbindung vorkommt: Ausgabe erklären [1 Punkt]
  zusätzlich: expliziter Typecast zu Oberklasse. Wieso ändert sich die Ausgabe nicht? [1 Punkt]
c) Sichtbarkeit: Code (mit Vererbung) gegeben: Auf welche Attribute darf xy zugreifen und warum? [1 Punkt]
3. a) Abstrakte Klasse (mit Attribut) und ein Interface implementieren, erben bzw. implementieren lassen [2-4 Punkte]
3. b) Abgesehen von der Syntax: Was sind die Unterschiede zwischen Interface und Abstrakter Klasse? [1 Punkt]






/** Ein Kreis. 

	Die Klasse beschreibt Kreise, die durch einen Mittelpunkt sowie 
	einen Radius charakterisiert sind. 
	
	@author Heike Wehrheim
	@version 1.2 
*/
public class Circle4 {
	/** Ein Objekt der Klasse Punkt als Mittelpunkt. */
	private Punkt mittelpunkt;
	
	/** Radius des Kreises. */
	private double radius;
	
	/** Konstruktor. 
		@param punkt Das Punktobjekt für den Mittelpunkt. 
		@param ir Der Radius. 
	*/ 
	public Circle4 (Punkt punkt, double ir) 
   	{ mittelpunkt = punkt; radius = ir; }
   	
   	/** Ein Getter für den X-Wert des Mittelpunktes. 
   		@return X Wert. 
   	*/ 
   	public int getX () { return mittelpunkt.getX(); } 
   	
   	/** Ein Getter für den Y-Wert des Mittelpunktes. 
   		@return Y Wert. 
   	*/ 
   	public int getY () { return mittelpunkt.getY(); }
   	
   	/** Ein Getter für den Radius. 
   		@return Der Radius. 
   	*/
   	public double getRadius () { return radius; }

	/** Veraenderung des Radius. 
		@param dr Der Wert, um den der Radius veraendert wird.
	*/
  	public void grow (double dr) { radius += dr; }
  	
  	/** Bewegung des Kreises. 
  		@param dx Der X Wert, um den verschoben wird. 
  		@param dy Der Y Wert, um den verschoben wird. 
  	*/ 
   	public void move (int dx, int dy) { mittelpunkt.move(dx,dy); }
   	
   	/** toString Methode fuer Kreise.  
   		@return Eine Zeichenkette, die den Kreis beschreibt. 
   	*/ 
   	public String toString () {
   		return "Ich bin ein Kreis mit Mittelpunkt " + "(" + 
   				mittelpunkt.getX() + " , " + 
   		        mittelpunkt.getY() + ")"+ " und Radius " + radius; 
   	}
} 
