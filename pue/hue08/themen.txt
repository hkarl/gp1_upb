- Programmcode nachvollziehen
	- 2 verschiedene Aufrufe des Konstruktors der Oberklasse: super().__init__(...) oder Oberklasse.__init__()
		--> Erläutern, welcher der beiden Aufrufe 'schöner' ist anhand von DRY (2 Pkt.)
	- Gegeben drei Klassen A,B,C wobei B,C von A erben
		- Aufruf des Konstruktors mit *args: Argumentieren, warum ein Beispielaufruf zum Fehler führt (1 Pkt.)
		- Veranschaulichung von isinstance (2 Pkt.)
		- Aufruf von Methoden bei Vererbung, in Anlehnung an die Vorlesung (2 Pkt.)
	(7 Punkte)
	
- Binärbaum
	- Löschen (siehe Mail von HK)
		- Was ist beim rekursivem Entwurf von Löschen der einfache Basisfall? Welche Zustandsinformation muss man sich in den rekursiven Aufrufen merken?
			(2 Pkt.)
		- Implementieren der Methode (4 Pkt.)
	(6 Punkte)
	
- Implementierung einer (anwendungsbezogenen) Queue am Beispiel eines Systems zur Verwaltung von Patienten im Wartezimmer einer Arztpraxis. Die Klasse Patient aus der vorherigen Aufgabe wird hier verwendet.
	- Implementierung der Klasse Arztpraxis:
		- Patienten können das Wartezimmer betreten
		- Sobald das Zimmer des Arztes frei ist, wird der Patient mit der längsten Wartezeit aus dem Wartezimmer geholt und ins Zimmer des Arztes geschickt
	- Implementierung einer weiteren Arztpraxis, welche zwischen normalen Patienten/Privatpatienten unterscheidet und Privatpatienten bevorzugt behandelt
	(6 Punkte)
		
- Doku
	(1 Punkt)