---
# Installing a JupyterHub server for GP1
# including grading function.
# Various sources to consider:
# - https://github.com/minrk/jupyterhub-deploy
# - newer fork: https://github.com/compmodels/jupyterhub-deploy
# - https://groups.google.com/forum/#!topic/jupyter/iX40zCPucAo
# - https://galaxy.ansible.com/jenkstom/jupyterhub/ (not looked at
# that yet)
# - https://github.com/jupyterhub/jupyterhub-deploy-teaching

# -------------------- 
# Basic setup 
- name: Firewall
  remote_user: root
  hosts: gp1hub
  tasks: 
    - name: Get ufw 
      apt: name=ufw state=installed 
    - name: turn loggin on 
      ufw: logging=on 
    - name: allow ssh 
      ufw: rule=limit port=ssh proto=tcp
    - name: allow OpenSSH 
      ufw: rule=limit name=OpenSSH 
    - name: allow Web80
      ufw: rule=allow port=80 proto=tcp
    # TODO: decide whether we proxy via 443 or over 8000
    # likely will depend on the decision regarding nginx reverse proxy
    - name: allow Web443
      ufw: rule=allow port=443 proto=tcp
    - name: allow Web8000
      ufw: rule=allow port=8000 proto=tcp
    - name: turn on ufw
      ufw: state=enabled policy=deny

  tags: fw

# some basic security
- name: Some more restricted security settings 
  remote_user: root
  hosts: gp1hub
  tasks: 
  - name: Restrict umask for all users
    # todo: check, does it have desired effect? 
    lineinfile:
      dest=/etc/login.defs
      regexp="UMASK\s*022"
      line="UMASK 077"
      state=present
  tags: security

# basic software
- name: Basic software installation 
  hosts: gp1hub
  remote_user: root
  tasks:
    - name: Basic software via apt 
      apt: name={{ item }} state=installed
      with_items:
        - git 
        - python3-dev
        - python3-pip
        - build-essential
    - name: Add jessie backports (for certbot)
      copy: src=jessie-backports.list dest=/etc/apt/sources.list.d/jessie-backports.list owner=root mode=0644
    # TODO: the installation from backports seems to fail via ansible
    # it worked on command line ? 
    # - name: install certbot
    #   apt: name=certbot state=latest default_release=jessie-backports update_cache=yes
    # 
  tags: software 


# -------------------- 
# JupyterHub as such

# create a user and a directory under which to run jupyterhub

- name: Create JupyterHub user and group, add some user 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Create group for jupyterhub account 
    group: name=jupyterhub state=present
  - name: Create jupyterhub user 
    action: user name=jupyterhub comment="JupyterHub User" state=present shell=/bin/date group=user groups="jupyterhub,shadow"
  - name: Add admin user to the jupyterhub group
    action: user name=hkarl groups=jupyterhub append=yes
  # TODO: think about whether public-key based login would help
  # - name: Copy public key to JupyterHub
  #   copy: src=/Users/hkarl/.ssh/id_rsa.pub dest=/home/jupyterhub/.ssh/authorized_keys owner=jupyterhub mode=0600
  # 
  # create a few test students 
  - name: Create Student user
    user: name={{ item }} comment="Test student account" state=present shell=/bin/zsh groups=user append=yes createhome=yes password="$6$DBwZI91KP$gnbsgSBlY/V32O4iPOaSRMPXxvLNRzgfE2/2byNY9Av7o8ryaJjivrygGTjBTgewcD98EEEcn73gDkhS6/E.2." append=yes
    with_items:
      - studa
      - studb
      - studc
  tags: user


- name: Set up certificates 
  hosts: gp1hub
  remote_user: root
  tasks:
    # TODO: obtain the certificate from letsencrypt, setup cron job for renewal
    # See: https://galaxy.ansible.com/telusdigital/certbot/ ??
    #     
  # Certbot certificate need to be readable to jupyterhub user
    - name: Add ACL for certificate directory
      acl: name=/etc/letsencrypt/live entity=jupyterhub etype=user permissions="rx" state=present
    - name: Add ACL for certificate directory
      acl: name=/etc/letsencrypt/archive entity=jupyterhub etype=user permissions="rx" state=present
    - name: Add ACL for certificate file
      acl: name=/etc/letsencrypt/archive/gp1test.cs.uni-paderborn.de/privkey1.pem entity=jupyterhub etype=user permissions="r" state=present
    - name: Add ACL for certificate file
      acl: name=/etc/letsencrypt/archive/gp1test.cs.uni-paderborn.de/fullchain1.pem entity=jupyterhub etype=user permissions="r" state=present
  tags: certify

# Single-user notebook:
- name: JupyterNotebook
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install Jupyter standalone notebook
    pip: name=jupyter executable=pip3 state=latest
  tags: jupyter 


# Compare: https://github.com/jupyterhub/jupyterhub
- name: Install software for jupyterhub 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install npm
    apt: name=npm state=installed
  - name: Install nodejs-legacy
    apt: name=nodejs-legacy state=installed
  - name: install the proxy
    npm: name=configurable-http-proxy global=yes
  - name: install jupyterhub itself
    pip: name=jupyterhub executable=pip3
  - name: install sudospawner
    pip: name=git+https://github.com/jupyter/sudospawner executable=pip3
    ignore_errors: yes
    # this needs checking - does it work despite error message? almost looks like it! TODO! 
  tags: jupyter 


# Set the sudoers file for the jupyterhub user
# compare: https://github.com/jupyterhub/jupyterhub/wiki/Using-sudo-to-run-JupyterHub-without-root-privileges
- name: Manipulate sudoers file
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Copy prepared sudoers file
    copy: src=sudoers.jupyterhub dest=/etc/sudoers.d/jupyterhub owner=root group=root mode=0440
  tags: sudo


# Deal with users in the configuration file, create directories, ...
- name: User setup, directories for users, ...
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Create notebook directory for users
    # file: path=/home/jupyterhub/assignments/{{ item }} owner={{ item }} group={{ item }} mode=0755 state=directory 
    file: path=/home/{{ item }}/notebooks owner={{ item }} group={{ item }} mode=0700 state=directory 
    with_items:
      # - hkarl <- this user needs special treatment as he already exists
      - jupyterhub
      - studa
      - studb
      - studc
  # - name: Create notebook directory for admin user at least
  #   file: path=/home/jupyterhub/assignments/jupyterhub owner=hkarl group=user mode=0755
  - name: Restrict access rights
    file: path=/home/{{ item }} mode=0700 state=directory 
    with_items:
      # - hkarl <- this user needs special treatment as he already exists
      - jupyterhub
      - studa
      - studb
      - studc
  tags: user
  
# Configure Jupyterhub and start it as a service
- name: Config Jupyterhub as a service 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Copy jupyterhub configuration file 
    copy: src=jupyterhub_config.py dest=/home/jupyterhub owner=jupyterhub group=user mode=0644
  - name: Copy service description file 
    copy: src=jupyterhub.service dest=/lib/systemd/system/jupyterhub.service owner=root mode=0644
  - name: Start the service
    service: name=jupyterhub state=started
  tags: service


# Nbgrader
- name: Install nbgrader 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install nbgrader
    pip: name=nbgrader executable=pip3 state=present
  - name: make sure /var/log/nbgrader exists
    file: path=/var/log/nbgrader/ state={{item}} owner=jupyterhub group=root mode=0755
    with_items:
      - directory
      - touch
  - name: make sure /srv/nbgrader/exchange exists
    file: path=/srv/nbgrader/exchange/ state={{item}} owner=jupyterhub group=root mode=0777
    with_items:
      - directory
      - touch
  - name: install the nbgrader extension
    command: nbgrader extension install
    become_user: jupyterhub
    become: true 
  - name: install the nbgrader activate 
    command: nbgrader extension activate
    become_user: jupyterhub
    become: true 
  # todo: figure out how to do that more elegantly, looping and become_user do not seem to mesh well
  - name: run install for each student user, studa 
    command: nbgrader extension activate
    become_user: studa
    become: true 
  - name: run install for each student user, studb
    command: nbgrader extension activate
    become_user: studb
    become: true 
  - name: run install for each student user, studc
    command: nbgrader extension activate
    become_user: studc
    become: true
  # and a course
  - name: quickstart an gp1test course
    command: jupyterhub nbgrader quickstart gp1test chdir=/home/jupyterhub creates=/home/jupyterhub/gp1test
    become_user: jupyterhub
    become: true
  tags: nbgrader 


- name: Install formgrader 
  hosts: gp1hub
  remote_user: root
  tasks:
  # todo: move this back up to previous step; only here to easy debugging
  - name: put configuration file gp1test in place
    copy: src=nbgrader_config.py dest=/home/jupyterhub/notebooks/gp1test/nbgrader_config.py  owner=jupyterhub group=jupyterhub mode=0644
  - name: put CONFIGPROXY_AUTH_TOKEN into environment
    lineinfile:
      dest=/home/jupyterhub/.zshrc
      insertafter=EOF
      line="export CONFIGPROXY_AUTH_TOKEN=\"3487d889ae9e718440a3455222849665eae234fa7d4d6e1f6ef8578323ed27f7\" "
      state=present
      # note: same value as in c.JupyterHub.proxy_auth_token of jupyterhub_config.py       
  - name: obtain token from jupyterhub
    command: jupyterhub token --db=sqlite:jupyterhub.sqlite -f jupyterhub_config.py jupyterhub  chdir=/home/jupyterhub
    become_user: jupyterhub
    become: true
    register: tokenoutput
  - debug: msg="{{ tokenoutput.stdout }}"
  - name: put token into nbgrader config
    lineinfile:
      dest=/home/jupyterhub/notebooks/gp1test/nbgrader_config.py
      regexp="c.HubAuth.hubapi_token = JPYAPITOKEN"
      line="c.HubAuth.hubapi_token = \"{{ tokenoutput.stdout }}\""
      state=present
  tags: formgrader


