---
# Installing a JupyterHub server for GP1
# including grading function.
# Various sources to consider:
# - https://github.com/minrk/jupyterhub-deploy
# - newer fork: https://github.com/compmodels/jupyterhub-deploy
# - https://groups.google.com/forum/#!topic/jupyter/iX40zCPucAo
# - https://galaxy.ansible.com/jenkstom/jupyterhub/ (not looked at
# that yet)
# - https://github.com/jupyterhub/jupyterhub-deploy-teaching

# --------------------

# load variables 

- name: load account variables
  hosts: gp1hub
  remote_user: root
  tasks: 
  - include_vars: "accounts/accounts.yaml"
  - include_vars: "accounts/students.yaml"
  - include_vars: "accounts/groupaccounts.yaml"
  tags: always

# Basic setup 
- name: Firewall
  remote_user: root
  hosts: gp1hub
  tasks: 
    - name: Get ufw 
      apt: name=ufw state=installed 
    - name: turn loggin on 
      ufw: logging=on 
    - name: allow ssh 
      ufw: rule=limit port=ssh proto=tcp
    - name: allow OpenSSH 
      ufw: rule=limit name=OpenSSH 
    - name: allow Web80
      ufw: rule=allow port=80 proto=tcp
    # TODO: decide whether we proxy via 443 or over 8000
    # likely will depend on the decision regarding nginx reverse proxy
    - name: allow Web443
      ufw: rule=allow port=443 proto=tcp
    - name: allow Web8000
      ufw: rule=allow port=8000 proto=tcp
    - name: turn on ufw
      ufw: state=enabled policy=deny

  tags: fw

# some basic security
- name: Some more restricted security settings 
  remote_user: root
  hosts: gp1hub
  tasks: 
  - name: Restrict umask for all users
    # todo: check, does it have desired effect? 
    lineinfile:
      dest=/etc/login.defs
      regexp="UMASK\s*022"
      line="UMASK 077"
      state=present
  tags: security

# basic software
- name: Basic software installation and configuration  
  hosts: gp1hub
  remote_user: root
  tasks:
    - name: Basic software via apt 
      apt: name={{ item }} state=installed
      with_items:
        - git 
        - python3-dev
        - python3-pip
        - build-essential
        - quota
        - PyYaml
    - name: Add jessie backports (for certbot)
      copy: src=jessie-backports.list dest=/etc/apt/sources.list.d/jessie-backports.list owner=root mode=0644
    # TODO: the installation from backports seems to fail via ansible
    # it worked on command line ? 
    # - name: install certbot
    #   apt: name=certbot state=latest default_release=jessie-backports update_cache=yes
    #
    - name: Turn on quotas on /home
      lineinfile:
        dest=/etc/fstab
        regexp="  LABEL=root    /               ext4        errors=remount-ro 0       1"
        line="  LABEL=root    /               ext4        errors=remount-ro,usrjquota=aquota.user,jqfmt=vfsv1 0       1"
    - name: remount to enable quotas
      shell: mount -o remount /
    # TODO: this needs figuring out - make sure to only run once, with filesystem unmounted
    # - name: create quota index
    #   command: quotacheck -vgum /
    # - name: turn on quota
    #   command: quotaon -av
  tags: software 


# -------------------- 
# JupyterHub as such

# create a user and a directory under which to run jupyterhub
# create all the other users as well 

- name: Create JupyterHub user and group, add some user 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Create group for jupyterhub account 
    group: name=jupyterhub state=present
  - name: Create jupyterhub user 
    action: user name=jupyterhub comment="JupyterHub User" state=present shell=/bin/bash group=user groups="jupyterhub,shadow"
  # TODO: think about whether public-key based login would help
  # - name: Copy public key to JupyterHub
  #   copy: src=/Users/hkarl/.ssh/id_rsa.pub dest=/home/jupyterhub/.ssh/authorized_keys owner=jupyterhub mode=0600
  #

  # create groups jupadmin, jupgrader, jupgroup jupstudent
  - name: create jupadmin group
    group: name=jupadmin state=present 
  - name: create jupgrader group
    group: name=jupgrader state=present 
  - name: create jupgroups group
    group: name=jupgroups state=present 
  - name: create jupstudent group
    group: name=jupstudent state=present 

  # create the corresponding accounts with quota (but we don't have
  # the skeleton yet? do it later?)
  
  tags: user
  

- name: Set up certificates 
  hosts: gp1hub
  remote_user: root
  tasks:
    # TODO: obtain the certificate from letsencrypt, setup cron job for renewal
    # See: https://galaxy.ansible.com/telusdigital/certbot/ ??
    #     
  # Certbot certificate need to be readable to jupyterhub user
    - name: Add ACL for certificate directory
      acl: name=/etc/letsencrypt/live entity=jupyterhub etype=user permissions="rx" state=present
    - name: Add ACL for certificate directory
      acl: name=/etc/letsencrypt/archive entity=jupyterhub etype=user permissions="rx" state=present
    - name: Add ACL for certificate file
      acl: name=/etc/letsencrypt/archive/gp1test.cs.uni-paderborn.de/privkey1.pem entity=jupyterhub etype=user permissions="r" state=present
    - name: Add ACL for certificate file
      acl: name=/etc/letsencrypt/archive/gp1test.cs.uni-paderborn.de/fullchain1.pem entity=jupyterhub etype=user permissions="r" state=present
  tags: certify

# Single-user notebook:
- name: JupyterNotebook
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install Jupyter standalone notebook
    pip: name=jupyter executable=pip3 state=latest
  tags: jupyter 


# Compare: https://github.com/jupyterhub/jupyterhub
- name: Install software for jupyterhub 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install npm
    apt: name=npm state=installed
  - name: Install nodejs-legacy
    apt: name=nodejs-legacy state=installed
  - name: install the proxy
    npm: name=configurable-http-proxy global=yes
  - name: install jupyterhub itself
    pip: name=jupyterhub executable=pip3
  - name: install sudospawner
    pip: name=git+https://github.com/jupyter/sudospawner executable=pip3
    ignore_errors: yes
    # this needs checking - does it work despite error message? almost looks like it! TODO! 
  tags: jupyter 


# Set the sudoers file for the jupyterhub user
# compare: https://github.com/jupyterhub/jupyterhub/wiki/Using-sudo-to-run-JupyterHub-without-root-privileges
- name: Manipulate sudoers file
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Copy prepared sudoers file
    copy: src=sudoers.jupyterhub dest=/etc/sudoers.d/jupyterhub owner=root group=root mode=0440
  tags: sudo


 
# Configure Jupyterhub and start it as a service
- name: Config Jupyterhub as a service 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Copy jupyterhub configuration file 
    copy: src=jupyterhub_config.py dest=/home/jupyterhub owner=jupyterhub group=user mode=0644
  - name: Copy service description file 
    copy: src=jupyterhub.service dest=/lib/systemd/system/jupyterhub.service owner=root mode=0644
  - name: Start the service
    service: name=jupyterhub state=started
  tags: service


# Nbgrader
- name: Install nbgrader 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: Install nbgrader
    pip: name=nbgrader executable=pip3 state=present
  - name: make sure /var/log/nbgrader exists
    file: path=/var/log/nbgrader/ state={{item}} owner=jupyterhub group=root mode=0755
    with_items:
      - directory
      - touch
  - name: make sure /srv/nbgrader/exchange exists
    file: path=/srv/nbgrader/exchange/ state={{item}} owner=jupyterhub group=root mode=0777
    with_items:
      - directory
      - touch
  - name: install the nbgrader extension
    command: nbgrader extension install 
  - name: install the nbgrader activate 
    command: nbgrader extension activate
    become_user: jupyterhub
    become: true 
  - name: put configuration file gp1test in place
    copy: src=nbgrader_config.py dest=/home/jupyterhub/notebooks/gp1test/nbgrader_config.py  owner=jupyterhub group=jupyterhub mode=0644
  # and a course
  # - name: quickstart an gp1test course
  #   command: jupyterhub nbgrader quickstart gp1test chdir=/home/jupyterhub creates=/home/jupyterhub/gp1test
  #   become_user: jupyterhub
  #   become: true
  tags: nbgrader 


- name: Install formgrader 
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: put CONFIGPROXY_AUTH_TOKEN into environment
    lineinfile:
      dest=/home/jupyterhub/.zshrc
      insertafter=EOF
      line="export CONFIGPROXY_AUTH_TOKEN=\"3487d889ae9e718440a3455222849665eae234fa7d4d6e1f6ef8578323ed27f7\" "
      state=present
      # note: same value as in c.JupyterHub.proxy_auth_token of jupyterhub_config.py       
  - name: obtain token from jupyterhub
    command: jupyterhub token --db=sqlite:jupyterhub.sqlite -f jupyterhub_config.py jupyterhub  chdir=/home/jupyterhub
    become_user: jupyterhub
    become: true
    register: tokenoutput
  - debug: msg="{{ tokenoutput.stdout }}"
  - name: put token into nbgrader config
    lineinfile:
      dest=/home/jupyterhub/notebooks/gp1test/nbgrader_config.py
      regexp="c.HubAuth.hubapi_token = JPYAPITOKEN"
      line="c.HubAuth.hubapi_token = \"{{ tokenoutput.stdout }}\""
      state=present
  tags: formgrader


#
# Setup for distribution of content
#

- name: DistributeContent
  hosts: gp1hub
  remote_user: root
  tasks:
  - name: install emacs
    apt: name={{ item }} state=installed
    with_items:
      - emacs24
      - texlive-latex-base
      - texlive-latex-extra
      - texlive-lang-german
  - name: install deployment key to access git.cs.upb.de
    copy: src=key/ dest=/home/jupyterhub/.ssh mode=0600
    become_user: jupyterhub
    become: true
  # TODO: copy skeleton to /etc/skel
  - name: Pull repository
    git:
      repo=irb-git@git.cs.upb.de:holger.karl/gp1-jupyter.git
      dest=/home/jupyterhub/gp1
      update=yes
    become_user: jupyterhub
    become: true
  - name: Symbolic link to emacs.d
    file:
      state=link
      src=/home/jupyterhub/gp1/installation/emacs.d
      dest=/home/jupyterhub/.emacs.d
  tags: content 

- name: Create actual student accounts
  hosts: gp1hub
  remote_user: root
  tasks:

  #group users are created and get a password: 
  - name: Create Group users
    user: name={{ item.acc }} comment="Account for jointly handing in assignments" state=present shell=/bin/bash groups=user,jupgroups append=yes createhome=yes password={{ item.hash }} skeleton=/home/jupyterhub/gp1/installation/skel
    with_items: "{{ groupaccounts }}"

  # all the other users are not created, but get a home dir with a proper link
  # prepare the pseudo-home directory hierarchy
  - name: Create Pseudo home directories
    file: path=/upb/users/{{ item }}/ owner=root group=root mode=0755 state=directory
    with_items: [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' ]
  
  # and are put in the respective groups
  - name: Create Jupyter user directories
    file: path=/home/{{ item }} owner={{ item }} group=user mode=0644 state=directory
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
    ignore_errors: yes 
    # TODO: this ignore_errors needs to be removed in production run!!! 

  # Create intermediate directory hierarchy - this looks like a stupid ansible limiation?
  - name: Create Jupyter directories to mirror /upb structure 
    file: path=/upb/users/{{ item[0] }}/{{ item }} owner=root group=root mode=0755 state=directory
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
  - name: Create Jupyter directories to mirror /upb structure 
    file: path=/upb/users/{{ item[0] }}/{{ item }}/profiles owner=root group=root mode=0755 state=directory
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
  - name: Create Jupyter directories to mirror /upb structure 
    file: path=/upb/users/{{ item[0] }}/{{ item }}/profiles/unix owner=root group=root mode=0755 state=directory
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
  
  - name: Create symbolic links to home directories
    file: dest=/upb/users/{{ item[0] }}/{{ item }}/profiles/unix/cs src=/home/{{ item }} owner=root group=root mode=0755 state=link 
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
    ignore_errors: yes 
    # TODO: this ignore_errors needs to be removed in production run!!!
    
  - name: Restrict access rights to home directories
    file: path=/home/{{ item }} mode=0700 state=directory 
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
  - name: Restrict access rights to home directories
    file: path=/home/{{ item.acc }} mode=0700 state=directory 
    with_items:
      - "{{ groupaccounts }}"

  # Put admins, graders, and students in the right groups
  # (no need to do that for group accounts; happens at creation time)
  - name: Put users in the corresponding groups -  jupadmin
    user: name={{ item }} groups=jupadmin append=yes
    with_items: "{{ admin }}"
  - name: Put users in the corresponding groups -  jupgrader
    user: name={{ item }} groups=jupgrader append=yes
    with_items: "{{ grader }}"
  - name: Put users in the corresponding groups -  jupstudent 
    user: name={{ item }} groups=jupstudent append=yes
    with_items: "{{ students }}"

  # activate nbgrader for relevant users, i.e., NOT for individual student accounts! :
  - name: activate nbgrader
    command: nbgrader extension activate
    become_user: "{{ item }}"
    become: true
    with_items:
      - "{{ admin }}"
      - "{{ grader }}"
  # group accounts are a dictionary, have to fish out the account name explicitly 
  - name: activate nbgrader
    command: nbgrader extension activate
    become_user: "{{ item.acc }}"
    become: true
    become_method: su
    with_items:
      - "{{ groupaccounts }}"
    
  # set quotas for student and group users
  - name: quota for group users
    command: setquota -u {{ item.acc }} 100000 200000 0 0  -a
    with_items: 
      - "{{ groupaccounts }}"
  - name: quota for individual student id 
    command: setquota -u {{ item }} 50000 100000 0 0  -a
    with_items: 
      - "{{ students }}"


  # limit file permissions of student and group users 
  - name: Limit permission of student, admin, grader user
    file: path=/home/{{ item }} mode=0700 state=touch
    with_items:
      - "{{ students }}"
      - "{{ grader }}"
      - "{{ admin }}"
  - name: Limit permission of group user
    file: path=/home/{{ item.acc }} mode=0700 state=touch 
    with_items:
      - "{{ groupaccounts }}"

  # put a symbolic link to the uploaded content into each users home
  # directory; to make it easier to access preconfigured content
  # (force = yes because the linked-to directory does not yet exist)
  - name: Create smybolic links to vorlesung content -- individual users 
    file:
      dest=/home/{{ item }}/vorlesung
      src=/home/jupyterhub/output/vorlesung
      owner=root
      mode=755
      state=link
      force=yes 
    with_items: 
      - "{{ admin }}"
      - "{{ grader }}"
      - "{{ students }}"
      
  - name: Create symbolic links to vorlesung content -- groupusers 
    file:
      dest=/home/{{ item.acc }}/vorlesung
      src=/home/jupyterhub/output/vorlesung
      owner=root
      mode=755
      state=link
      force=yes 
    with_items: 
      - "{{ groupaccounts }}"
    
  - name: Restart the service after nbgrader setup 
    service: name=jupyterhub state=restarted
      
  tags: user


#####################################################

- name: Set up samba server 
  hosts: gp1hub
  remote_user: root
  tasks:
    - name: allow Samba ports
      ufw: rule=allow port={{ item }} proto=tcp
      with_items:
        - 445
        - 137
        - 138
        - 139
    - name: install samba packages
      apt: "name={{ item }} state=installed"
      with_items:
        - samba
        - samba-common

    - name: Ensure Samba is running and set to start on boot.
      service: "name=smbd state=started enabled=yes"

  tags: samba

